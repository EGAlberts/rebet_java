apply plugin: 'java'
apply plugin: 'org.ros2.tools.gradle'

sourceCompatibility = JavaVersion.VERSION_21
targetCompatibility = JavaVersion.VERSION_21

buildscript {
  repositories {
    jcenter()
    mavenCentral()
    mavenLocal()
    maven {
      url "https://plugins.gradle.org/m2/"
    }
  }

  dependencies {
    classpath 'org.ros2.tools.gradle:ament:0.8.6'
    classpath 'org.eclipse.emf:org.eclipse.emf.common:2.26.0'
    classpath 'org.eclipse.emf:org.eclipse.emf.ecore:2.37.0'
    classpath 'org.eclipse.emf:org.eclipse.emf.ecore.xmi:2.37.0'
    classpath 'org.eclipse.xtext:org.eclipse.xtext:2.38.0'
    classpath 'org.eclipse.xtext:org.eclipse.xtext.common.types:2.38.0'
    classpath 'org.eclipse.xtext:org.eclipse.xtext.xbase:2.38.0'
  }
}

repositories {
   mavenCentral()
}

dependencies {
    // Add the local .jar file from the libs folder
    implementation files('libs/eu.coresense.adaptation_1.0.0.jar')
    implementation files('libs/eu.coresense.resolution_1.0.0.jar')
    implementation files('libs/de.fraunhofer.ipa.ros.xtext_3.0.1.jar')
    implementation files('libs/de.fraunhofer.ipa.ros_3.0.0.jar')
    implementation files('libs/de.fraunhofer.ipa.rossystem_3.0.0.jar')
    implementation files('libs/de.fraunhofer.ipa.rossystem.xtext_3.0.0.jar')
    implementation files('libs/de.fraunhofer.ipa.ros2.xtext_3.0.0.jar')

    
    

    implementation 'org.eclipse.emf:org.eclipse.emf.common:2.26.0'
    implementation 'org.eclipse.emf:org.eclipse.emf.ecore:2.37.0'
    implementation 'org.eclipse.emf:org.eclipse.emf.ecore.xmi:2.37.0'

    implementation 'org.eclipse.xtext:org.eclipse.xtext:2.38.0.v20250226-0658'
    implementation 'org.eclipse.xtext:org.eclipse.xtext.common.types:2.38.0'
    implementation 'org.eclipse.xtext:org.eclipse.xtext.xbase:2.38.0'
}

// Use the same syntax as the entry points for the Python examples
ament {
    entryPoints {
        consoleScripts = [
            'adaptation_engine = org.ros2.rcljava.rebet_java.nodes.AdaptationEngine',
            'test_node = org.ros2.rcljava.rebet_java.nodes.Test',
        ]
    }
}

task copyDependencies(type: Copy) {
    from configurations.runtimeClasspath // Get all runtime dependencies
    into new File(ament.installSpace + "/share/" + ament.packageManifestName + "/java")
    duplicatesStrategy = DuplicatesStrategy.INCLUDE // Exclude duplicate files
}

build.dependsOn copyDependencies

task sourcesJar(type: Jar, dependsOn: classes) {
    archiveClassifier.set('sources')
    destinationDirectory = new java.io.File(ament.installSpace + "/share/" + ament.packageManifestName +
                                      "/java")
    from sourceSets.main.allSource
}

artifacts {
    archives sourcesJar
}